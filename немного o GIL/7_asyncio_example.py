"""
Для оптимизации производительности можно
разбить код на независимые задачи и выполнять
их параллельно. Вместо использования потоков
Python, которые могут столкнуться с GIL,
рассмотрите использование более низкоуровневых
механизмов, таких как процессы или асинхронное
программирование.

Пример использования асинхронного кода
с библиотекой asyncio:
"""
import asyncio

async def async_task():
    await asyncio.sleep(1)
    print('Выполнение асинхронной задачи')

async def main():
    tasks = [async_task() for _ in range(10)]
    await asyncio.gather(*tasks)

if __name__ == '__main__':
    asyncio.run(main())